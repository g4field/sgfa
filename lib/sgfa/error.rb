#
# Simple Group of Filing Applications
# Errors
#
# Copyright (C) 2015 by Graham A. Field.
#
# See LICENSE.txt for licensing information.
#
# This program is distributed WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

module Sgfa


##########################################################################
# Errors generated by the Sgfa system
module Error


  ##########################################
  # Most limit checks
  #
  # @param str [String] String to check
  # @param min [Integer] Minimum length
  # @param max [Integer] max Maximum length
  # @param inv [Regexp, String] Invalid characters
  # @param desc [String] desc Description of string
  # @raise [Error::Limits] if limits are violated
  def self.limits(str, min, max, inv, desc)

    # string
    if !str || !str.is_a?(String)
      raise Error::Limits, desc + ' is not a string.'
    end

    # size
    size = str.size
    if str.size > max
      raise Error::Limits, '%s length %d is too large, limit %d' %
        [desc, size, max]
    end
    if str.size < min
      raise Error::Limits, '%s length %d is too small, limit %d' %
        [desc, size, min]
    end

    # invalid characters
    idx = str.index(inv)
    if idx
      raise Error::Limits,
        '%s contains invalid character \'%s\'' % [desc, str[idx]]
    end
  end # def self.limits()


###########################################################
# Sanity check failed
class Sanity < StandardError; end


###########################################################
# Outside of limits
class Limits < StandardError; end


###########################################################
# Corrupt file
class Corrupt < StandardError; end


###########################################################
# Outside of limits
class Limits < StandardError; end


###########################################################
# Conflict of some type
class Conflict < StandardError; end


###########################################################
# Does not exist
class NonExistent < StandardError; end


###########################################################
# Permission check failed
class Permission < StandardError; end

end # module Error

end # module Sgfa
